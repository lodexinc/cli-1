// +build ignore

package main

import (
	"fmt"
	"os"
	"strings"
	"text/template"
	"unicode"
)

type input struct {
	EntityName       string
	EntityNameSnake  string
	EntityNameDashes string
	EntityNameVar    string
}

func toSnakeCase(s string) string {
	var result []rune

	for i, roon := range s {
		if i > 0 && unicode.IsUpper(roon) {
			result = append(result, '_')
		}
		result = append(result, unicode.ToLower(roon))
	}

	return string(result)
}

func toDashes(s string) string {
	return strings.Replace(toSnakeCase(s), "_", "-", -1)
}

func toVarName(s string) string {
	var runes []rune

	runes = append(runes, unicode.ToLower(rune(s[0])))
	runes = append(runes, []rune(s[1:len(s)])...)

	return string(runes)
}

func main() {
	codeTemplateText := `// generated by gen_get_by_guid.go

package ccv2

import (
  "code.cloudfoundry.org/cli/api/cloudcontroller"
  "code.cloudfoundry.org/cli/api/cloudcontroller/ccv2/internal"
)

// Get{{ .EntityName }} returns the {{ .EntityName }} associated with the provided GUID.
func (client *Client) Get{{ .EntityName }}(guid string) ({{ .EntityName }}, Warnings, error) {
	request, err := client.newHTTPRequest(requestOptions{
		RequestName: internal.Get{{ .EntityName }}Request,
		URIParams:   Params{"{{ .EntityNameSnake }}_guid": guid},
	})
	if err != nil {
		return {{ .EntityName }}{}, nil, err
	}

	var {{ .EntityNameVar }} {{ .EntityName }}
	response := cloudcontroller.Response{
		Result: &{{ .EntityNameVar }},
	}

	err = client.connection.Make(request, &response)
	return {{ .EntityNameVar }}, response.Warnings, err
}
`

	testTemplateText := `// generated by gen_get_by_guid.go

package ccv2_test

import (
	"net/http"

	. "code.cloudfoundry.org/cli/api/cloudcontroller/ccv2"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	. "github.com/onsi/gomega/ghttp"
)

var _ = Describe("{{ .EntityName }}", func() {
	var client *Client

	BeforeEach(func() {
		client = NewTestClient()
	})

	Describe("Get{{ .EntityName }}", func() {
		Context("when the {{ .EntityName }} exists", func() {
			BeforeEach(func() {
				response := ` + "`" + `{
					"metadata": {
						"guid": "some-{{ .EntityNameDashes }}-guid"
					},
					"entity": {
						"name": "some-{{ .EntityNameDashes }}"
					}
				}` + "`" + `
				server.AppendHandlers(
					CombineHandlers(
						VerifyRequest(http.MethodGet, "/v2/{{ .EntityNameSnake }}s/some-{{ .EntityNameDashes }}-guid"),
						RespondWith(http.StatusOK, response, http.Header{"X-Cf-Warnings": {"warning-1, warning-2"}}),
					))
			})

			It("returns the {{ .EntityNameSnake }} and all warnings", func() {
				{{ .EntityNameSnake }}, warnings, err := client.Get{{ .EntityName }}("some-{{ .EntityNameDashes }}-guid")

				Expect(err).ToNot(HaveOccurred())
				Expect({{ .EntityNameSnake }}).To(Equal(
					{{ .EntityName }}{
						GUID: "some-{{ .EntityNameDashes }}-guid",
						Name: "some-{{ .EntityNameDashes }}",
					},
				))
				Expect(warnings).To(ConsistOf("warning-1", "warning-2"))
			})
		})

		Context("when an error is encountered", func() {
			BeforeEach(func() {
				response := ` + "`" + `{
					"code": 10001,
					"description": "Some Error",
					"error_code": "CF-SomeError"
				}` + "`" + `
				server.AppendHandlers(
					CombineHandlers(
						VerifyRequest(http.MethodGet, "/v2/{{ .EntityNameSnake }}s/some-{{ .EntityNameSnake }}-guid"),
						RespondWith(http.StatusTeapot, response, http.Header{"X-Cf-Warnings": {"warning-1, warning-2"}}),
					))
			})

			It("returns an error and all warnings", func() {
				_, warnings, err := client.Get{{ .EntityName }}("some-{{ .EntityNameSnake }}-guid")

				Expect(err).To(MatchError(UnexpectedResponseError{
					ResponseCode: http.StatusTeapot,
					CCErrorResponse: CCErrorResponse{
						Code:        10001,
						Description: "Some Error",
						ErrorCode:   "CF-SomeError",
					},
				}))
				Expect(warnings).To(ConsistOf("warning-1", "warning-2"))
			})
		})
	})
})
`

	templateInput := input{
		EntityName:       os.Args[1],
		EntityNameSnake:  toSnakeCase(os.Args[1]),
		EntityNameDashes: toDashes(os.Args[1]),
		EntityNameVar:    toVarName(os.Args[1]),
	}

	codeTemplate := template.New("code")
	codeTemplate.Parse(codeTemplateText)

	codeFilename := fmt.Sprintf("get_%s.go", templateInput.EntityNameSnake)
	codeFile, err := os.Create(codeFilename)
	defer codeFile.Close()
	if err != nil {
		panic(err)
	}

	fmt.Printf("writing %s\n", codeFilename)

	err = codeTemplate.Execute(codeFile, templateInput)
	if err != nil {
		panic(err)
	}

	testTemplate := template.New("test")
	testTemplate.Parse(testTemplateText)

	testFilename := fmt.Sprintf("get_%s_test.go", templateInput.EntityNameSnake)
	testFile, err := os.Create(testFilename)
	defer testFile.Close()
	if err != nil {
		panic(err)
	}

	fmt.Printf("writing %s\n", testFilename)

	err = testTemplate.Execute(testFile, templateInput)
	if err != nil {
		panic(err)
	}
}
